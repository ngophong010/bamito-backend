paths:
  # --- USER-FACING ENDPOINTS ---
  /orders:
    post:
      tags: [Orders]
      summary: Create a new order (e.g., for Cash on Delivery)
      description: Creates a new order from the user's cart items. The server will perform all operations (create order, update inventory, clear cart) in a single transaction.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../schemas/order.yaml#/OrderInput'
      responses:
        '201':
          description: Order created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                    description: The human-readable ID of the newly created order.
        '400':
          description: Bad Request (e.g., validation error, item out of stock).

    get:
      tags: [Orders]
      summary: Get the current user's order history
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          required: true
          schema:
            type: integer
            description: "The status of orders to retrieve (e.g., 1: Pending, 2: Shipped, 3: Delivered)."
        - $ref: '../components/parameters.yaml#/limit'
        - $ref: '../components/parameters.yaml#/page'
      responses:
        '200':
          description: A paginated list of the user's orders.
          content:
            application/json:
              schema:
                $ref: '../schemas/order.yaml#/PaginatedOrders'

  /orders/{id}:
    get:
      tags: [Orders]
      summary: Get details for a specific order
      security:
        - BearerAuth: []
      parameters:
        - $ref: '../components/parameters.yaml#/id'
      responses:
        '200':
          description: The full details of the requested order.
          content:
            application/json:
              schema:
                $ref: '../schemas/order.yaml#/OrderDetail'
        '403':
          description: Forbidden (User does not own this order).
        '404':
          description: Order not found.

  /orders/{id}/cancel:
    put:
      tags: [Orders]
      summary: Cancel an order
      security:
        - BearerAuth: []
      parameters:
        - $ref: '../components/parameters.yaml#/id'
      responses:
        '200':
          description: Order cancelled successfully.
        '403':
          description: Forbidden (User does not own this order).
        '400':
          description: Order cannot be cancelled.

  # ===============================================================
  # --- PAYMENT GATEWAY ENDPOINTS ---
  # ===============================================================
  /orders/create-payment-url:
    post:
      tags: [Orders]
      summary: Create a VNPAY payment URL
      description: Takes order data and generates a unique URL for the VNPAY payment gateway. The order data is securely encoded within the URL to be stateless.
      security:
        - BearerAuth: []
      requestBody:
        $ref: '../schemas/order.yaml#/OrderInput'
      responses:
        '200':
          description: The payment URL was created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  urlPayment:
                    type: string
                    format: url

  /orders/vnpay-return:
    get:
      tags: [Orders]
      summary: Callback endpoint for VNPAY return
      description: The user is redirected to this endpoint by VNPAY after a payment attempt. The server validates the secure hash and, if successful, creates the order in the database.
      parameters:
        - name: vnp_ResponseCode
          in: query
          schema:
            type: string
          description: "The response code from VNPAY. '00' indicates success."
      responses:
        '302':
          description: A redirect to either the order success page or a payment failed page on the frontend.

  # ===============================================================
  # --- ADMIN-ONLY ENDPOINTS ---
  # ===============================================================
  /orders/admin/all:
    get:
      tags: [Orders (Admin)]
      summary: Get all orders with pagination (Admin)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '../components/parameters.yaml#/status'
        - $ref: '../components/parameters.yaml#/limit'
        - $ref: '../components/parameters.yaml#/page'
      responses:
        '200':
          description: A paginated list of all orders.
          content:
            application/json:
              schema:
                $ref: '../schemas/order.yaml#/PaginatedOrders'

  /orders/admin/statistics:
    get:
      tags: [Orders (Admin)]
      summary: Get dashboard statistics (Admin)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A summary of sales and order statistics.
          content:
            application/json:
              schema:
                $ref: '../schemas/order.yaml#/Statistics'

  /orders/admin/reports/products:
    get:
      tags: [Orders (Admin)]
      summary: Get a paginated sales report (Admin)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '../components/parameters.yaml#/timeStart'
        - $ref: '../components/parameters.yaml#/timeEnd'
        - $ref: '../components/parameters.yaml#/limit'
        - $ref: '../components/parameters.yaml#/page'
      responses:
        '200':
          description: A paginated sales report of order line items.

  /orders/admin/{id}/status:
    put:
      tags: [Orders (Admin)]
      summary: Update the status of an order (Admin)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '../components/parameters.yaml#/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: integer
                  description: "The new status code for the order."
              required: [status]
      responses:
        '200':
          description: Order status updated successfully.
        '404':
          description: Order not found.

  /orders/admin/{id}:
    delete:
      tags: [Orders (Admin)]
      summary: Delete an order (Admin)
      security:
        - BearerAuth: []
      parameters:
        - $ref: '../components/parameters.yaml#/id'
      responses:
        '200':
          description: Order deleted successfully.
        '404':
          description: Order not found.